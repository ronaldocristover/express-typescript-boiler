generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid()) @db.VarChar(36)
  name       String   @db.VarChar(255)
  phone      String   @db.VarChar(20)
  created_at DateTime @default(now())

  // Relations
  group_members        GroupMember[]
  group_event_payments GroupEventPayment[]
  admin_groups         Group[]

  @@map("users")
}

model Group {
  id          String      @id @default(uuid()) @db.VarChar(36)
  name        String      @db.VarChar(255)
  description String?     @db.Text
  admin_id    String      @db.VarChar(36)
  amount      Int         @default(0)
  start_at    DateTime?
  status      GroupStatus @default(ACTIVE)
  created_at  DateTime    @default(now())

  // Relations
  admin         User          @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  group_members GroupMember[]
  group_events  GroupEvent[]

  // Indexes
  @@index([admin_id])
  @@index([status])
  @@index([start_at])
  @@index([created_at])
  @@map("groups")
}

model GroupMember {
  id         String            @id @default(uuid()) @db.VarChar(36)
  status     GroupMemberStatus @default(ACTIVE)
  join_date  DateTime          @default(now())
  user_id    String            @db.VarChar(36)
  group_id   String            @db.VarChar(36)
  created_at DateTime          @default(now())

  // Relations
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  group Group @relation(fields: [group_id], references: [id], onDelete: Cascade)

  @@unique([user_id, group_id])
  // Indexes
  @@index([user_id])
  @@index([group_id])
  @@index([status])
  @@index([join_date])
  @@index([created_at])
  @@map("group_members")
}

model GroupEvent {
  id                 String      @id @default(uuid()) @db.VarChar(36)
  group_id           String      @db.VarChar(36)
  period_number      Int
  period_description String?     @db.Text
  cashout_date       DateTime?
  status             EventStatus @default(SCHEDULED)
  winner_id          String?     @db.VarChar(36)
  created_at         DateTime    @default(now())

  // Relations
  group                Group               @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_event_payments GroupEventPayment[]

  @@unique([group_id, period_number])
  // Indexes
  @@index([group_id])
  @@index([period_number])
  @@index([status])
  @@index([cashout_date])
  @@index([winner_id])
  @@index([created_at])
  @@map("group_events")
}

model GroupEventPayment {
  id             String        @id @default(uuid()) @db.VarChar(36)
  user_id        String        @db.VarChar(36)
  group_id       String        @db.VarChar(36)
  amount         Int
  method         PaymentMethod @default(TRANSFER)
  group_event_id String        @db.VarChar(36)
  status         PaymentStatus @default(PENDING)
  evidence       String?       @db.Text
  payment_date   DateTime?

  // Relations
  user        User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  group_event GroupEvent @relation(fields: [group_event_id], references: [id], onDelete: Cascade)

  @@unique([user_id, group_event_id])
  // Indexes
  @@index([user_id])
  @@index([group_id])
  @@index([group_event_id])
  @@index([status])
  @@index([payment_date])
  @@map("group_event_payments")
}

// Enums
enum GroupStatus {
  ACTIVE
  INACTIVE
  DONE
}

enum GroupMemberStatus {
  ACTIVE
  INACTIVE
}

enum EventStatus {
  SCHEDULED
  DONE
  CANCELED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentMethod {
  TRANSFER
  CASH
}
