version: '3.8'

services:
  # Development Express TypeScript Application with hot reload
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: express-app-dev
    ports:
      - "8888:8888"
    env_file:
      - .env.docker
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
      - APP_NAME=express-app-dev
      - HOSTNAME=docker-dev
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - app-network
    restart: unless-stopped
    command: npm run dev

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: mysql-db-dev
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=boiler_express
      - MYSQL_USER=appuser
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - mysql_dev_data:/var/lib/mysql
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis-cache-dev
    ports:
      - "6380:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq-broker-dev
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq_dev_data:/var/lib/rabbitmq
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  mysql_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  rabbitmq_dev_data:
    driver: local

networks:
  app-network:
    driver: bridge